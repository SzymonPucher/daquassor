import datetime as dt
from typing import List, Optional

from pydantic import EmailStr
from sqlmodel import SQLModel, Field


class User(SQLModel, table=True):
    __table_args__ = {"extend_existing": True}
    email: EmailStr = Field(primary_key=True)
    created_at: dt.datetime = Field(default_factory=dt.datetime.utcnow)
    last_updated_at: Optional[dt.datetime] = Field(default=None)
    fullname: Optional[str] = Field(default=None)
    password: Optional[str] = Field(default=None)
    access_attributes: Optional[List[str]] = Field(default=None)

    def get_public_info(self):
        return dict(
            email=self.email,
            created_at=self.created_at.isoformat(),
            last_updated_at=self.last_updated_at.isoformat()
            if self.last_updated_at
            else None,
            fullname=self.fullname,
            access_attributes=self.access_attributes,
        )

    class Config:  # configuration for documentation generated by fastapi
        schema_extra = {
            "example": {
                "email": "sp@gmail.com",
                "created_at": dt.datetime.utcnow(),
                "last_updated_at": None,
                "fullname": "Szymon Pucher",
                "password": "weak_password",
                "access_attributes": ["attr1", "attr2"],
            }
        }

    def update_from_obj(self, user):
        self.fullname = user.fullname
        self.password = user.password if user.password else self.password
        self.access_attributes = self.access_attributes
